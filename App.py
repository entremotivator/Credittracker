"""
Streamlit Credit Card & Tradeline Manager
- Demo CSV built-in
- Features: add/edit/delete entries, payment date, reporting date, points, balance, limit
- Calculations: utilization, days until payment, days since reporting, upcoming payments, simple charts
- Export CSV

Run: pip install streamlit pandas numpy altair
      streamlit run credit_tradeline_manager.py

Author: Generated by ChatGPT
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import io
import altair as alt

st.set_page_config(page_title="Credit & Tradeline Manager", layout="wide")

# --------------------------- Demo data ---------------------------
@st.cache_data
def load_demo_data():
    today = pd.Timestamp(datetime.now().date())
    demo = pd.DataFrame([
        {
            "id": 1,
            "account_name": "Chase Sapphire Preferred",
            "type": "Credit Card",
            "balance": 450.00,
            "credit_limit": 5000.00,
            "payment_date": (today + pd.Timedelta(days=7)).strftime('%Y-%m-%d'),
            "reporting_date": (today - pd.Timedelta(days=8)).strftime('%Y-%m-%d'),
            "points": 12000,
            "interest_rate": 20.24,
            "status": "Open",
            "notes": "Rotating travel card"
        },
        {
            "id": 2,
            "account_name": "Citi Double Cash",
            "type": "Credit Card",
            "balance": 1200.50,
            "credit_limit": 6000.00,
            "payment_date": (today + pd.Timedelta(days=20)).strftime('%Y-%m-%d'),
            "reporting_date": (today - pd.Timedelta(days=22)).strftime('%Y-%m-%d'),
            "points": 2400,
            "interest_rate": 18.99,
            "status": "Open",
            "notes": "Cashback card"
        },
        {
            "id": 3,
            "account_name": "Auto Loan - Wells Fargo",
            "type": "Installment",
            "balance": 9500.00,
            "credit_limit": 9500.00,
            "payment_date": (today + pd.Timedelta(days=15)).strftime('%Y-%m-%d'),
            "reporting_date": (today - pd.Timedelta(days=30)).strftime('%Y-%m-%d'),
            "points": 0,
            "interest_rate": 6.5,
            "status": "Open",
            "notes": "60-month loan"
        },
    ])
    return demo

# --------------------------- Utilities ---------------------------

def calculate_utilization(balance, limit):
    try:
        return round((float(balance) / float(limit)) * 100, 2) if float(limit) > 0 else np.nan
    except Exception:
        return np.nan


def days_until(date_str):
    try:
        d = pd.to_datetime(date_str).normalize()
        return (d - pd.Timestamp(datetime.now().date())).days
    except Exception:
        return None


def days_since(date_str):
    try:
        d = pd.to_datetime(date_str).normalize()
        return (pd.Timestamp(datetime.now().date()) - d).days
    except Exception:
        return None

# --------------------------- Data management ---------------------------

if 'df' not in st.session_state:
    st.session_state.df = load_demo_data()
    st.session_state.next_id = int(st.session_state.df['id'].max()) + 1

# Sidebar controls
with st.sidebar:
    st.title("Manager")
    action = st.radio("Action", ["View / Filter", "Add Account", "Import CSV"])
    st.markdown("---")
    st.write("Quick stats")
    df_stats = st.session_state.df.copy()
    total_balance = df_stats['balance'].sum()
    total_limit = df_stats['credit_limit'].sum()
    avg_util = calculate_utilization(total_balance, total_limit)
    st.metric("Total balance", f"${total_balance:,.2f}")
    st.metric("Total limit", f"${total_limit:,.2f}")
    st.metric("Avg utilization", f"{avg_util}%")
    st.markdown("---")
    if st.button("Reset demo data"):
        st.session_state.df = load_demo_data()
        st.session_state.next_id = int(st.session_state.df['id'].max()) + 1
        st.success("Demo data restored")

# --------------------------- Import CSV ---------------------------
if action == "Import CSV":
    st.header("Import accounts from CSV")
    st.markdown("CSV must include columns: account_name,type,balance,credit_limit,payment_date,reporting_date,points,interest_rate,status,notes")
    uploaded = st.file_uploader("Upload CSV", type=['csv'])
    if uploaded is not None:
        try:
            new = pd.read_csv(uploaded)
            # ensure id
            if 'id' not in new.columns:
                new.insert(0, 'id', range(st.session_state.next_id, st.session_state.next_id + len(new)))
                st.session_state.next_id += len(new)
            st.session_state.df = pd.concat([st.session_state.df, new], ignore_index=True)
            st.success("CSV imported")
        except Exception as e:
            st.error(f"CSV import failed: {e}")

# --------------------------- Add Account ---------------------------
elif action == "Add Account":
    st.header("Add a new account / tradeline")
    with st.form("add_form"):
        name = st.text_input("Account name", "")
        acc_type = st.selectbox("Type", ["Credit Card", "Installment", "Charge Card", "Store Card", "Other"]) 
        balance = st.number_input("Balance", min_value=0.0, value=0.0, step=1.0, format="%.2f")
        credit_limit = st.number_input("Credit limit", min_value=0.0, value=1000.0, step=50.0, format="%.2f")
        payment_date = st.date_input("Next payment date", value=datetime.now().date())
        reporting_date = st.date_input("Last reporting date", value=(datetime.now().date() - timedelta(days=30)))
        points = st.number_input("Points / Rewards", min_value=0, value=0, step=1)
        interest_rate = st.number_input("Interest rate (APR)", min_value=0.0, value=15.99, step=0.01, format="%.2f")
        status = st.selectbox("Status", ["Open", "Closed", "Frozen", "Charge-off"]) 
        notes = st.text_area("Notes", "")
        submitted = st.form_submit_button("Add account")
        if submitted:
            new_row = {
                'id': st.session_state.next_id,
                'account_name': name,
                'type': acc_type,
                'balance': float(balance),
                'credit_limit': float(credit_limit),
                'payment_date': pd.to_datetime(payment_date).strftime('%Y-%m-%d'),
                'reporting_date': pd.to_datetime(reporting_date).strftime('%Y-%m-%d'),
                'points': int(points),
                'interest_rate': float(interest_rate),
                'status': status,
                'notes': notes
            }
            st.session_state.next_id += 1
            st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([new_row])], ignore_index=True)
            st.success("Account added")

# --------------------------- View / Filter ---------------------------
else:
    st.header("Accounts & Reports")
    df = st.session_state.df.copy()

    # Derived columns
    df['utilization_%'] = df.apply(lambda r: calculate_utilization(r['balance'], r['credit_limit']), axis=1)
    df['days_until_payment'] = df['payment_date'].apply(days_until)
    df['days_since_reporting'] = df['reporting_date'].apply(days_since)

    # Filters
    with st.expander("Filters", expanded=True):
        cols = st.columns(4)
        name_filter = cols[0].text_input("Search name")
        type_filter = cols[1].multiselect("Type", options=df['type'].unique().tolist(), default=df['type'].unique().tolist())
        status_filter = cols[2].multiselect("Status", options=df['status'].unique().tolist(), default=df['status'].unique().tolist())
        util_max = cols[3].slider("Max utilization %", min_value=0, max_value=200, value=100)

    if name_filter:
        df = df[df['account_name'].str.contains(name_filter, case=False, na=False)]
    df = df[df['type'].isin(type_filter) & df['status'].isin(status_filter)]
    df = df[df['utilization_%'] <= util_max]

    # Layout
    left, right = st.columns([2,1])
    with left:
        st.subheader("Account table")
        st.dataframe(df.sort_values(by='utilization_%', ascending=False).reset_index(drop=True))

        # Select row to edit
        st.markdown("---")
        st.subheader("Edit / Delete an account")
        edit_id = st.number_input("Account ID to edit/delete (use table 'id')", min_value=int(df['id'].min()), value=int(df['id'].min()))
        selected = st.session_state.df[st.session_state.df['id'] == edit_id]
        if selected.empty:
            st.warning("No account found with that ID")
        else:
            r = selected.iloc[0]
            with st.form("edit_form"):
                name = st.text_input("Account name", value=r['account_name'])
                acc_type = st.selectbox("Type", ["Credit Card", "Installment", "Charge Card", "Store Card", "Other"], index=0 if r['type']=="Credit Card" else 1)
                balance = st.number_input("Balance", min_value=0.0, value=float(r['balance']), format="%.2f")
                credit_limit = st.number_input("Credit limit", min_value=0.0, value=float(r['credit_limit']), format="%.2f")
                payment_date = st.date_input("Next payment date", value=pd.to_datetime(r['payment_date']).date())
                reporting_date = st.date_input("Last reporting date", value=pd.to_datetime(r['reporting_date']).date())
                points = st.number_input("Points / Rewards", min_value=0, value=int(r['points']))
                interest_rate = st.number_input("Interest rate (APR)", min_value=0.0, value=float(r['interest_rate']), format="%.2f")
                status = st.selectbox("Status", ["Open", "Closed", "Frozen", "Charge-off"], index=0 if r['status']=="Open" else 1)
                notes = st.text_area("Notes", value=r.get('notes',''))
                update = st.form_submit_button("Save changes")
                delete = st.form_submit_button("Delete account")
                if update:
                    idx = st.session_state.df[st.session_state.df['id'] == edit_id].index[0]
                    st.session_state.df.at[idx, 'account_name'] = name
                    st.session_state.df.at[idx, 'type'] = acc_type
                    st.session_state.df.at[idx, 'balance'] = float(balance)
                    st.session_state.df.at[idx, 'credit_limit'] = float(credit_limit)
                    st.session_state.df.at[idx, 'payment_date'] = pd.to_datetime(payment_date).strftime('%Y-%m-%d')
                    st.session_state.df.at[idx, 'reporting_date'] = pd.to_datetime(reporting_date).strftime('%Y-%m-%d')
                    st.session_state.df.at[idx, 'points'] = int(points)
                    st.session_state.df.at[idx, 'interest_rate'] = float(interest_rate)
                    st.session_state.df.at[idx, 'status'] = status
                    st.session_state.df.at[idx, 'notes'] = notes
                    st.success("Account updated")
                if delete:
                    st.session_state.df = st.session_state.df[st.session_state.df['id'] != edit_id].reset_index(drop=True)
                    st.success("Account deleted")

    with right:
        st.subheader("Summary charts")
        # Utilization bar
        chart_df = df.copy()
        if not chart_df.empty:
            chart_df = chart_df.nlargest(10, 'utilization_%')
            bar = alt.Chart(chart_df).mark_bar().encode(
                x=alt.X('utilization_%:Q', title='Utilization %'),
                y=alt.Y('account_name:N', sort='-x', title='Account')
            )
            st.altair_chart(bar, use_container_width=True)

        st.markdown("---")
        st.subheader("Upcoming Payments (next 30 days)")
        upcoming = df[df['days_until_payment'] <= 30].sort_values('days_until_payment')
        if upcoming.empty:
            st.info("No payments in the next 30 days")
        else:
            st.table(upcoming[['id','account_name','balance','payment_date','days_until_payment']])

        st.markdown("---")
        st.subheader("Recently Reported (last 45 days)")
        recent = df[df['days_since_reporting'] <= 45].sort_values('days_since_reporting')
        if recent.empty:
            st.info("No recently reported accounts")
        else:
            st.table(recent[['id','account_name','balance','reporting_date','days_since_reporting']])

    # Export
    st.markdown("---")
    st.subheader("Export / Download")
    csv_buf = io.StringIO()
    st.session_state.df.to_csv(csv_buf, index=False)
    st.download_button("Download full CSV", data=csv_buf.getvalue(), file_name="accounts_export.csv", mime='text/csv')

    # Quick calculations and tips
    st.markdown("---")
    st.subheader("Quick calculations")
    tot_bal = st.session_state.df['balance'].sum()
    tot_limit = st.session_state.df['credit_limit'].sum()
    tot_util = calculate_utilization(tot_bal, tot_limit)
    st.write(f"Total balance: ${tot_bal:,.2f}")
    st.write(f"Total credit limit: ${tot_limit:,.2f}")
    st.write(f"Aggregate utilization: {tot_util}%")

    st.markdown("---")
    st.subheader("Pro tips")
    st.write("• Keep individual card utilization below 30% where possible.")
    st.write("• Track reporting dates to know which balances will appear on your credit report each month.")
    st.write("• Use the points column to track rewards redemptions and optimizations.")

# --------------------------- End ---------------------------

